@startuml
participant "Issuer" as I
actor Prover as P
participant "Verifier" as V
participant "Sovrin" as S
participant "reliable\npublic\nstorage" as D

== Common Parameters ==

note over I, V
    Generate Common parameters:
    **(Gamma, rho, g, h)**
    random or calculated from random
end note

note over I, V
end note

== Claim Definition setup ==

I -> S: **CLAIM_DEF**

== Issuer Setup ==

I -> I: Generates Primary Private Key **SK**

I -> I: Generates Revocation Private Key **SK_R**

I -> S: Submit Primary and Revocation Public Keys (**ISSUER_KEY** transaction)

I -> I: Generate an accumulator secret key: **sk_accum**

I -> I: Generate accumulator **Tails**

I -> S: Submit Revocation Registry Definition: (**REVOC_REG** transaction)

I -> D: Publish **Tails**


== Prover setup ==
P -> P: m1

== Issuance ==

I -> I: Checks if the current accumulator \n **SK**

P -> I: **U**\nbased on random and PK_I

I -> P: **(A, e, v'')**\nbased on U, PK_I and random

P -> P: **Cr=({m_i}, A, e, v)** - credential\n- based on values from issuer\n- not known to Verifier!

== Proof Preparation ==

V -> P: **n_1** - nonce

P -> P: **PrC** - sub-proof for each credential Cr\nbased on Cr, PK_I, n_1 and random

P -> P: **PrP** - sub-proof for each predicate p\nbased on p, Cr, PK_I, n_1 and random

P -> V: **Pr=(c, {PrC}, {Prp}, //C//)** - full proof\n- based on p, Cr, PK_I, n_1 and random\n- doesn't reveal neither credentials\n nor attribute values hidden from Verifier

== Verification ==

V -> V: **c'** - based on Pr, PK_I, m_i (i from A_r).

V -> V: if **c=c'** - OK!


@enduml